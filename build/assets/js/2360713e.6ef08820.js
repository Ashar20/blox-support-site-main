"use strict";(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[4074],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),g=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=g(e.components);return a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=g(n),m=o,c=u["".concat(d,".").concat(m)]||u[m]||s[m]||l;return n?a.createElement(c,r(r({ref:t},p),{},{components:n})):a.createElement(c,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var g=2;g<l;g++)r[g]=n[g];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},26396:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(87462),o=n(67294),l=n(72389),r=n(79443);var i=function(){var e=(0,o.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},d=n(89521),g=n(86010),p="tabItem_1uMI";function s(e){var t,n,a,l=e.lazy,r=e.block,s=e.defaultValue,u=e.values,m=e.groupId,c=e.className,h=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=u?u:h.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),N=(0,d.lx)(k,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===s?s:null!=(t=null!=s?s:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=h[0])?void 0:a.props.value;if(null!==b&&!k.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var f=i(),v=f.tabGroupChoices,y=f.setTabGroupChoices,C=(0,o.useState)(b),I=C[0],x=C[1],T=[],w=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var D=v[m];null!=D&&D!==I&&k.some((function(e){return e.value===D}))&&x(D)}var z=function(e){var t=e.currentTarget,n=T.indexOf(t),a=k[n].value;a!==I&&(w(t),x(a),null!=m&&y(m,a))},S=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;n=T[a]||T[0];break;case"ArrowLeft":var o=T.indexOf(e.currentTarget)-1;n=T[o]||T[T.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,g.Z)("tabs",{"tabs--block":r},c)},k.map((function(e){var t=e.value,n=e.label;return o.createElement("li",{role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,className:(0,g.Z)("tabs__item",p,{"tabs__item--active":I===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:S,onFocus:z,onClick:z},null!=n?n:t)}))),l?(0,o.cloneElement)(h.filter((function(e){return e.props.value===I}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==I})}))))}function u(e){var t=(0,l.Z)();return o.createElement(s,(0,a.Z)({key:String(t)},e))}},10723:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return g},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var a=n(87462),o=n(63366),l=(n(67294),n(3905)),r=n(26396),i=n(58215),d=["components"],g={title:"Toggle | ion-toggle: Custom Toggle Button for Ionic Applications",description:"Toggle changes the state of a single option. Use ion-toggle to create customizable toggle buttons that can be switched on or off for your applications.",sidebar_label:"ion-toggle",demoUrl:"/docs/demos/api/toggle/index.html",demoSourceUrl:"https://github.com/ionic-team/ionic-docs/tree/main/static/demos/api/toggle/index.html"},p="ion-toggle",s={unversionedId:"api/toggle",id:"version-v5/api/toggle",isDocsHomePage:!1,title:"Toggle | ion-toggle: Custom Toggle Button for Ionic Applications",description:"Toggle changes the state of a single option. Use ion-toggle to create customizable toggle buttons that can be switched on or off for your applications.",source:"@site/versioned_docs/version-v5/api/toggle.md",sourceDirName:"api",slug:"/api/toggle",permalink:"/developer/docs/v5/api/toggle",editUrl:"https://github.com/ionic-team/ionic-docs/tree/main/docs/api/toggle.md",tags:[],version:"v5",frontMatter:{title:"Toggle | ion-toggle: Custom Toggle Button for Ionic Applications",description:"Toggle changes the state of a single option. Use ion-toggle to create customizable toggle buttons that can be switched on or off for your applications.",sidebar_label:"ion-toggle",demoUrl:"/docs/demos/api/toggle/index.html",demoSourceUrl:"https://github.com/ionic-team/ionic-docs/tree/main/static/demos/api/toggle/index.html"},sidebar:"version-v5/api",previous:{title:"ion-toast",permalink:"/developer/docs/v5/api/toast"},next:{title:"ion-toolbar",permalink:"/developer/docs/v5/api/toolbar"}},u=[{value:"Customization",id:"customization",children:[{value:"Customizing Background",id:"customizing-background",children:[],level:3},{value:"Customizing Width",id:"customizing-width",children:[],level:3},{value:"Customizing Height",id:"customizing-height",children:[],level:3},{value:"Customizing Spacing",id:"customizing-spacing",children:[],level:3},{value:"Customizing Border Radius",id:"customizing-border-radius",children:[],level:3},{value:"Customizing Box Shadow",id:"customizing-box-shadow",children:[],level:3},{value:"Customizing Overflow",id:"customizing-overflow",children:[],level:3}],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"Properties",id:"properties",children:[{value:"checked",id:"checked",children:[],level:3},{value:"color",id:"color",children:[],level:3},{value:"disabled",id:"disabled",children:[],level:3},{value:"mode",id:"mode",children:[],level:3},{value:"name",id:"name",children:[],level:3},{value:"value",id:"value",children:[],level:3}],level:2},{value:"Events",id:"events",children:[],level:2},{value:"CSS Shadow Parts",id:"css-shadow-parts",children:[],level:2},{value:"CSS Custom Properties",id:"css-custom-properties",children:[],level:2}],m={toc:u};function c(e){var t=e.components,n=(0,o.Z)(e,d);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"ion-toggle"},"ion-toggle"),(0,l.kt)("p",null,"Toggles change the state of a single option. Toggles can be switched on or off by pressing or swiping them. They can also be checked programmatically by setting the ",(0,l.kt)("inlineCode",{parentName:"p"},"checked")," property."),(0,l.kt)("h2",{id:"customization"},"Customization"),(0,l.kt)("h3",{id:"customizing-background"},"Customizing Background"),(0,l.kt)("p",null,"The background of the toggle track and handle can be customized using CSS variables. There are also variables for setting the background differently when the toggle is checked."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  --background: #000;\n  --background-checked: #7a49a5;\n\n  --handle-background: #7a49a5;\n  --handle-background-checked: #000;\n}\n")),(0,l.kt)("p",null,"Because these variables set the ",(0,l.kt)("inlineCode",{parentName:"p"},"background")," property, which is a shorthand, it can accept any value that the ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/background"},"background property")," accepts."),(0,l.kt)("p",null,"A more complex case may involve adding an image to the handle background."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  --handle-background-checked: #fff url(/assets/power-icon.png) no-repeat center / contain;\n}\n")),(0,l.kt)("p",null,"Taking it a step further, we could use the ",(0,l.kt)("inlineCode",{parentName:"p"},"::before")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"::after")," pseudo-elements to position text on top of the background."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle::before {\n  position: absolute;\n\n  top: 16px;\n  left: 10px;\n\n  content: 'ON';\n\n  color: white;\n  font-size: 8px;\n\n  z-index: 1;\n}\n")),(0,l.kt)("h3",{id:"customizing-width"},"Customizing Width"),(0,l.kt)("p",null,"Adjusting the width of the toggle ",(0,l.kt)("strong",{parentName:"p"},"smaller")," will result in a narrower track, with the handle remaining the default width. If desired, set ",(0,l.kt)("inlineCode",{parentName:"p"},"--handle-width")," to make the handle narrower."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  width: 40px;\n}\n")),(0,l.kt)("p",null,"Adjusting the width of the toggle ",(0,l.kt)("strong",{parentName:"p"},"larger")," will result in a wider track, with the handle remaining the default width. If desired, set ",(0,l.kt)("inlineCode",{parentName:"p"},"--handle-width")," to make the handle wider."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  width: 100px;\n}\n")),(0,l.kt)("h3",{id:"customizing-height"},"Customizing Height"),(0,l.kt)("p",null,"Adjusting the height of the toggle ",(0,l.kt)("strong",{parentName:"p"},"smaller")," than the default will result in the handle height auto-sizing itself to the track. In ",(0,l.kt)("inlineCode",{parentName:"p"},"ios")," the handle is shorter than the track (",(0,l.kt)("inlineCode",{parentName:"p"},"100% - 4px"),") and in ",(0,l.kt)("inlineCode",{parentName:"p"},"md")," the handle is taller than the track (",(0,l.kt)("inlineCode",{parentName:"p"},"100% + 6px"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  height: 15px;\n}\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: this does not affect the handle width, width should be set using ",(0,l.kt)("inlineCode",{parentName:"p"},"--handle-width"),".")),(0,l.kt)("p",null,"Adjusting the height of the toggle ",(0,l.kt)("strong",{parentName:"p"},"larger")," will keep the handle in the center at the default height. This can be modified by setting ",(0,l.kt)("inlineCode",{parentName:"p"},"--handle-height")," which can be set to any amount but will not exceed the ",(0,l.kt)("inlineCode",{parentName:"p"},"--handle-max-height"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  height: 60px;\n}\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: this does not affect the handle width, width should be set using ",(0,l.kt)("inlineCode",{parentName:"p"},"--handle-width"),".")),(0,l.kt)("h3",{id:"customizing-spacing"},"Customizing Spacing"),(0,l.kt)("p",null,"The spacing refers to the horizontal gap between the handle and the track. By default, the handle has ",(0,l.kt)("inlineCode",{parentName:"p"},"2px")," of spacing around it in ",(0,l.kt)("inlineCode",{parentName:"p"},"ios")," ",(0,l.kt)("strong",{parentName:"p"},"only"),". In ",(0,l.kt)("inlineCode",{parentName:"p"},"md")," mode there is no default spacing."),(0,l.kt)("p",null,"To remove the ",(0,l.kt)("strong",{parentName:"p"},"horizontal")," spacing, set ",(0,l.kt)("inlineCode",{parentName:"p"},"--handle-spacing")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"0px"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  --handle-spacing: 0px;\n}\n")),(0,l.kt)("p",null,"Due to the handle having a fixed height, to remove the spacing on the top and bottom, set the height to 100%."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  --handle-spacing: 0px;\n  --handle-height: 100%;\n}\n")),(0,l.kt)("h3",{id:"customizing-border-radius"},"Customizing Border Radius"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"--handle-border-radius")," can be used to change the ",(0,l.kt)("inlineCode",{parentName:"p"},"border-radius")," on the handle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  --handle-border-radius: 14px 4px 4px 14px;\n}\n")),(0,l.kt)("p",null,"To target the ",(0,l.kt)("inlineCode",{parentName:"p"},"border-radius")," only when the toggle is checked, target ",(0,l.kt)("inlineCode",{parentName:"p"},".toggle-checked"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle.toggle-checked {\n  --handle-border-radius: 4px 14px 14px 4px;\n}\n")),(0,l.kt)("h3",{id:"customizing-box-shadow"},"Customizing Box Shadow"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"--handle-box-shadow")," can be used to change the ",(0,l.kt)("inlineCode",{parentName:"p"},"box-shadow")," on the handle."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  --handle-box-shadow: 4px 0 2px 0 red;\n}\n")),(0,l.kt)("p",null,"To target the box shadow only when the toggle is checked, target ",(0,l.kt)("inlineCode",{parentName:"p"},".toggle-checked"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle.toggle-checked {\n  --handle-box-shadow: -4px 0 2px 0 red;\n}\n")),(0,l.kt)("p",null,"See the section on ",(0,l.kt)("a",{parentName:"p",href:"#customizing-overflow"},"customizing overflow")," to allow the ",(0,l.kt)("inlineCode",{parentName:"p"},"box-shadow")," to overflow the toggle container."),(0,l.kt)("h3",{id:"customizing-overflow"},"Customizing Overflow"),(0,l.kt)("p",null,"Setting ",(0,l.kt)("inlineCode",{parentName:"p"},"overflow")," on the toggle will be inherited by the toggle handle. By default, overflow is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"hidden")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"ios")," only. The ",(0,l.kt)("inlineCode",{parentName:"p"},"box-shadow")," will still appear cut off due to the ",(0,l.kt)("inlineCode",{parentName:"p"},"contain")," css property. Set ",(0,l.kt)("inlineCode",{parentName:"p"},"contain")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"none")," in order to overflow the toggle container."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"ion-toggle {\n  --handle-box-shadow: 0 3px 12px rgba(255, 0, 0, 0.6), 0 3px 1px rgba(50, 70, 255, 0.6);\n\n  overflow: visible;\n\n  contain: none;\n}\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)(r.Z,{groupId:"framework",defaultValue:"angular",values:[{value:"angular",label:"Angular"},{value:"javascript",label:"Javascript"},{value:"react",label:"React"},{value:"stencil",label:"Stencil"},{value:"vue",label:"Vue"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"angular",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- Default Toggle --\x3e\n<ion-toggle></ion-toggle>\n\n\x3c!-- Disabled Toggle --\x3e\n<ion-toggle disabled></ion-toggle>\n\n\x3c!-- Checked Toggle --\x3e\n<ion-toggle checked></ion-toggle>\n\n\x3c!-- Toggle Colors --\x3e\n<ion-toggle color="primary"></ion-toggle>\n<ion-toggle color="secondary"></ion-toggle>\n<ion-toggle color="danger"></ion-toggle>\n<ion-toggle color="light"></ion-toggle>\n<ion-toggle color="dark"></ion-toggle>\n\n\x3c!-- Toggles in a List --\x3e\n<ion-list>\n  <ion-item>\n    <ion-label>Pepperoni</ion-label>\n    <ion-toggle [(ngModel)]="pepperoni"></ion-toggle>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Sausage</ion-label>\n    <ion-toggle [(ngModel)]="sausage" disabled="true"></ion-toggle>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Mushrooms</ion-label>\n    <ion-toggle [(ngModel)]="mushrooms"></ion-toggle>\n  </ion-item>\n</ion-list>\n'))),(0,l.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- Default Toggle --\x3e\n<ion-toggle></ion-toggle>\n\n\x3c!-- Disabled Toggle --\x3e\n<ion-toggle disabled></ion-toggle>\n\n\x3c!-- Checked Toggle --\x3e\n<ion-toggle checked></ion-toggle>\n\n\x3c!-- Toggle Colors --\x3e\n<ion-toggle color="primary"></ion-toggle>\n<ion-toggle color="secondary"></ion-toggle>\n<ion-toggle color="danger"></ion-toggle>\n<ion-toggle color="light"></ion-toggle>\n<ion-toggle color="dark"></ion-toggle>\n\n\x3c!-- Toggles in a List --\x3e\n<ion-list>\n  <ion-item>\n    <ion-label>Pepperoni</ion-label>\n    <ion-toggle slot="end" value="pepperoni" checked></ion-toggle>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Sausage</ion-label>\n    <ion-toggle slot="end" value="sausage" disabled></ion-toggle>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Mushrooms</ion-label>\n    <ion-toggle slot="end" value="mushrooms"></ion-toggle>\n  </ion-item>\n</ion-list>\n'))),(0,l.kt)(i.Z,{value:"react",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'import React, { useState } from \'react\';\nimport {\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  IonToggle,\n  IonList,\n  IonItem,\n  IonLabel,\n  IonItemDivider,\n} from \'@ionic/react\';\n\nexport const ToggleExamples: React.FC = () => {\n  const [checked, setChecked] = useState(false);\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>ToggleExamples</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonList>\n          <IonItemDivider>Default Toggle</IonItemDivider>\n          <IonItem>\n            <IonLabel>Checked: {JSON.stringify(checked)}</IonLabel>\n            <IonToggle checked={checked} onIonChange={(e) => setChecked(e.detail.checked)} />\n          </IonItem>\n\n          <IonItemDivider>Disabled Toggle</IonItemDivider>\n          <IonItem>\n            <IonToggle disabled />\n          </IonItem>\n\n          <IonItemDivider>Checked Toggle</IonItemDivider>\n          <IonItem>\n            <IonToggle checked />\n          </IonItem>\n\n          <IonItemDivider>Toggle Colors</IonItemDivider>\n          <IonItem>\n            <IonToggle color="primary" />\n          </IonItem>\n          <IonItem>\n            <IonToggle color="secondary" />\n          </IonItem>\n          <IonItem>\n            <IonToggle color="danger" />\n          </IonItem>\n          <IonItem>\n            <IonToggle color="light" />\n          </IonItem>\n          <IonItem>\n            <IonToggle color="dark" />\n          </IonItem>\n\n          <IonItemDivider>Toggles in a List</IonItemDivider>\n          <IonItem>\n            <IonLabel>Pepperoni</IonLabel>\n            <IonToggle value="pepperoni" />\n          </IonItem>\n\n          <IonItem>\n            <IonLabel>Sausage</IonLabel>\n            <IonToggle value="sausage" disabled={true} />\n          </IonItem>\n\n          <IonItem>\n            <IonLabel>Mushrooms</IonLabel>\n            <IonToggle value="mushrooms" />\n          </IonItem>\n        </IonList>\n      </IonContent>\n    </IonPage>\n  );\n};\n'))),(0,l.kt)(i.Z,{value:"stencil",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Component, State, h } from '@stencil/core';\n\n@Component({\n  tag: 'toggle-example',\n  styleUrl: 'toggle-example.css',\n})\nexport class ToggleExample {\n  @State() pepperoni: boolean = false;\n  @State() sausage: boolean = true;\n  @State() mushrooms: boolean = false;\n\n  render() {\n    return [\n      // Default Toggle\n      <ion-toggle></ion-toggle>,\n\n      // Disabled Toggle\n      <ion-toggle disabled></ion-toggle>,\n\n      // Checked Toggle\n      <ion-toggle checked></ion-toggle>,\n\n      // Toggle Colors\n      <ion-toggle color=\"primary\"></ion-toggle>,\n      <ion-toggle color=\"secondary\"></ion-toggle>,\n      <ion-toggle color=\"danger\"></ion-toggle>,\n      <ion-toggle color=\"light\"></ion-toggle>,\n      <ion-toggle color=\"dark\"></ion-toggle>,\n\n      // Toggles in a List\n      <ion-list>\n        <ion-item>\n          <ion-label>Pepperoni</ion-label>\n          <ion-toggle checked={this.pepperoni} onIonChange={(ev) => (this.pepperoni = ev.detail.checked)}></ion-toggle>\n        </ion-item>\n\n        <ion-item>\n          <ion-label>Sausage</ion-label>\n          <ion-toggle\n            checked={this.sausage}\n            onIonChange={(ev) => (this.sausage = ev.detail.checked)}\n            disabled={true}\n          ></ion-toggle>\n        </ion-item>\n\n        <ion-item>\n          <ion-label>Mushrooms</ion-label>\n          <ion-toggle checked={this.mushrooms} onIonChange={(ev) => (this.mushrooms = ev.detail.checked)}></ion-toggle>\n        </ion-item>\n      </ion-list>,\n\n      <div>\n        Pepperoni: {this.pepperoni ? 'true' : 'false'}\n        <br />\n        Sausage: {this.sausage ? 'true' : 'false'}\n        <br />\n        Mushrooms: {this.mushrooms ? 'true' : 'false'}\n      </div>,\n    ];\n  }\n}\n"))),(0,l.kt)(i.Z,{value:"vue",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  \x3c!-- Default Toggle --\x3e\n  <ion-toggle></ion-toggle>\n\n  \x3c!-- Disabled Toggle --\x3e\n  <ion-toggle disabled></ion-toggle>\n\n  \x3c!-- Checked Toggle --\x3e\n  <ion-toggle checked></ion-toggle>\n\n  \x3c!-- Toggle Colors --\x3e\n  <ion-toggle color="primary"></ion-toggle>\n  <ion-toggle color="secondary"></ion-toggle>\n  <ion-toggle color="danger"></ion-toggle>\n  <ion-toggle color="light"></ion-toggle>\n  <ion-toggle color="dark"></ion-toggle>\n\n  \x3c!-- Toggles in a List --\x3e\n  <ion-list>\n    <ion-item>\n      <ion-label>Pepperoni</ion-label>\n      <ion-toggle\n        @ionChange="toppings.value.push($event.target.value)"\n        value="pepperoni"\n        :checked="toppings.value.indexOf(\'pepperoni\') !== -1"\n      >\n      </ion-toggle>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Sausage</ion-label>\n      <ion-toggle\n        @ionChange="toppings.value.push($event.target.value)"\n        value="sausage"\n        :checked="toppings.value.indexOf(\'sausage\') !== -1"\n        disabled="true"\n      >\n      </ion-toggle>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Mushrooms</ion-label>\n      <ion-toggle\n        @ionChange="toppings.value.push($event.target.value)"\n        value="mushrooms"\n        :checked="toppings.value.indexOf(\'mushrooms\') !== -1"\n      >\n      </ion-toggle>\n    </ion-item>\n  </ion-list>\n</template>\n\n<script>\n  import { IonLabel, IonList, IonItem, IonToggle } from \'@ionic/vue\';\n  import { defineComponent, vue } from \'vue\';\n\n  export default defineComponent({\n    components: { IonLabel, IonList, IonItem, IonToggle },\n    setup() {\n      const toppings = ref([]);\n\n      return { toppings };\n    },\n  });\n<\/script>\n')))),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"checked"},"checked"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the toggle is selected.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Attribute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"checked"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false"))))),(0,l.kt)("h3",{id:"color"},"color"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"The color to use from your application's color palette.",(0,l.kt)("br",null),"Default options are: ",(0,l.kt)("inlineCode",{parentName:"td"},'"primary"'),", ",(0,l.kt)("inlineCode",{parentName:"td"},'"secondary"'),", ",(0,l.kt)("inlineCode",{parentName:"td"},'"tertiary"'),", ",(0,l.kt)("inlineCode",{parentName:"td"},'"success"'),", ",(0,l.kt)("inlineCode",{parentName:"td"},'"warning"'),", ",(0,l.kt)("inlineCode",{parentName:"td"},'"danger"'),", ",(0,l.kt)("inlineCode",{parentName:"td"},'"light"'),", ",(0,l.kt)("inlineCode",{parentName:"td"},'"medium"'),", and ",(0,l.kt)("inlineCode",{parentName:"td"},'"dark"'),".",(0,l.kt)("br",null),"For more information on colors, see ",(0,l.kt)("a",{parentName:"td",href:"/developer/docs/v5/theming/basics"},"theming"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Attribute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"color"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string \\| undefined"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,l.kt)("h3",{id:"disabled"},"disabled"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the user cannot interact with the toggle.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Attribute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"disabled"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false"))))),(0,l.kt)("h3",{id:"mode"},"mode"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"The mode determines which platform styles to use.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Attribute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"mode"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"ios" \\| "md"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,l.kt)("h3",{id:"name"},"name"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the control, which is submitted with the form data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Attribute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"this.inputId"))))),(0,l.kt)("h3",{id:"value"},"value"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Description")),(0,l.kt)("td",{parentName:"tr",align:null},"The value of the toggle does not mean if it's checked or not, use the ",(0,l.kt)("inlineCode",{parentName:"td"},"checked"),(0,l.kt)("br",null),"property for that.",(0,l.kt)("br",null),(0,l.kt)("br",null),"The value of a toggle is analogous to the value of a ",(0,l.kt)("inlineCode",{parentName:"td"},'<input type="checkbox">'),",",(0,l.kt)("br",null),"it's only used when the toggle participates in a native ",(0,l.kt)("inlineCode",{parentName:"td"},"<form>"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Attribute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"value"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"null \\| string \\| undefined"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"'on'"))))),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ionBlur")),(0,l.kt)("td",{parentName:"tr",align:null},"Emitted when the toggle loses focus.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ionChange")),(0,l.kt)("td",{parentName:"tr",align:null},"Emitted when the value property has changed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ionFocus")),(0,l.kt)("td",{parentName:"tr",align:null},"Emitted when the toggle has focus.")))),(0,l.kt)("h2",{id:"css-shadow-parts"},"CSS Shadow Parts"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"handle")),(0,l.kt)("td",{parentName:"tr",align:null},"The toggle handle, or knob, used to change the checked state.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"track")),(0,l.kt)("td",{parentName:"tr",align:null},"The background track of the toggle.")))),(0,l.kt)("h2",{id:"css-custom-properties"},"CSS Custom Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--background")),(0,l.kt)("td",{parentName:"tr",align:null},"Background of the toggle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--background-checked")),(0,l.kt)("td",{parentName:"tr",align:null},"Background of the toggle when checked")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--border-radius")),(0,l.kt)("td",{parentName:"tr",align:null},"Border radius of the toggle track")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--handle-background")),(0,l.kt)("td",{parentName:"tr",align:null},"Background of the toggle handle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--handle-background-checked")),(0,l.kt)("td",{parentName:"tr",align:null},"Background of the toggle handle when checked")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--handle-border-radius")),(0,l.kt)("td",{parentName:"tr",align:null},"Border radius of the toggle handle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--handle-box-shadow")),(0,l.kt)("td",{parentName:"tr",align:null},"Box shadow of the toggle handle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--handle-height")),(0,l.kt)("td",{parentName:"tr",align:null},"Height of the toggle handle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--handle-max-height")),(0,l.kt)("td",{parentName:"tr",align:null},"Maximum height of the toggle handle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--handle-spacing")),(0,l.kt)("td",{parentName:"tr",align:null},"Horizontal spacing around the toggle handle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--handle-transition")),(0,l.kt)("td",{parentName:"tr",align:null},"Transition of the toggle handle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--handle-width")),(0,l.kt)("td",{parentName:"tr",align:null},"Width of the toggle handle")))))}c.isMDXComponent=!0}}]);